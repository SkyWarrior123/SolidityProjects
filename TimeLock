// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.8;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

 contract TimeLock {
    uint32 public constant duration = 1 minutes ;
    uint public immutable end;
    address payable public immutable owner;

    constructor ( address payable _owner ) {
        end = block.timestamp + duration;
        owner = _owner;
    }

    function deposit(address payable token, uint amount ) payable public {
        IERC20(token).transferFrom( msg.sender, address(this), amount );
    }

    receive() external payable {}

    function withdraw( address payable token, uint amount ) payable public {
        require(owner == msg.sender, 'only owner');
        require( block.timestamp >= end, 'too early');
        if( token == address(0)) {
            owner.transfer(amount);
        }
        else {
            IERC20(token).transfer( owner, amount );
        }
    }
}
